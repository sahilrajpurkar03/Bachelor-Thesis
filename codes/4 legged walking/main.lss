
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000416  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800202  00800202  000004ac  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  000004c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c31  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000254  00000000  00000000  00001239  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c3  00000000  00000000  0000148d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000025d  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001d3  00000000  00000000  00001cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e1       	ldi	r30, 0x16	; 22
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 32       	cpi	r26, 0x2B	; 43
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
 122:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <pneumatic_init>:
bool next_pair = 0;


void pneumatic_init()
{
    DDRA = 0xFF;        //for hip pneumatics 0 --> left_front,right_back; 1 --> right_front,left_back
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	81 b9       	out	0x01, r24	; 1
    DDRB = 0xFF;        //for foot pneumatics 0 --> left_front,right_back; 1 --> right_front,left_back
 12e:	84 b9       	out	0x04, r24	; 4
    DDRD = 0x00;        //for ir/reed switch 0 --> left_front, 1 --> right_front,
 130:	1a b8       	out	0x0a, r1	; 10
 132:	08 95       	ret

00000134 <bluetooth_init>:
                        //                    2 --> left_back, 3 --> right_back
}

void bluetooth_init()
{
    DDRJ |= (1<<PJ0)|(1<<PJ1);
 134:	e4 e0       	ldi	r30, 0x04	; 4
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	80 81       	ld	r24, Z
 13a:	83 60       	ori	r24, 0x03	; 3
 13c:	80 83       	st	Z, r24
    PORTJ |= (1<<PJ1)|(1<<PJ0);//bluetooth
 13e:	e5 e0       	ldi	r30, 0x05	; 5
 140:	f1 e0       	ldi	r31, 0x01	; 1
 142:	80 81       	ld	r24, Z
 144:	83 60       	ori	r24, 0x03	; 3
 146:	80 83       	st	Z, r24
 148:	08 95       	ret

0000014a <sensor_read>:
}

uint8_t sensor_read()
{
    uint8_t value = PIND & 0x0F;
 14a:	89 b1       	in	r24, 0x09	; 9
    return value;
}
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	08 95       	ret

00000150 <left_front_right_back>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	8f eb       	ldi	r24, 0xBF	; 191
 154:	9f e0       	ldi	r25, 0x0F	; 15
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <left_front_right_back+0x6>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <left_front_right_back+0x10>
 160:	00 00       	nop

void left_front_right_back()
{
    _delay_ms(350);
    PORTA |= (1<<0);
 162:	10 9a       	sbi	0x02, 0	; 2
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	93 e2       	ldi	r25, 0x23	; 35
 16a:	21 50       	subi	r18, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <left_front_right_back+0x1a>
 172:	00 c0       	rjmp	.+0      	; 0x174 <left_front_right_back+0x24>
 174:	00 00       	nop
    _delay_ms(800);
//    val_sens = sensor_read();
//    while(val_sens & 0x02);
    PORTB &= ~(1<<0);
 176:	28 98       	cbi	0x05, 0	; 5
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	8f eb       	ldi	r24, 0xBF	; 191
 17c:	9f e0       	ldi	r25, 0x0F	; 15
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <left_front_right_back+0x2e>
 186:	00 c0       	rjmp	.+0      	; 0x188 <left_front_right_back+0x38>
 188:	00 00       	nop
    _delay_ms(350);
    PORTB |= (1<<0);
 18a:	28 9a       	sbi	0x05, 0	; 5
    PORTA |= (1<<1);
 18c:	11 9a       	sbi	0x02, 1	; 2
    next_pair = 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 02 02 	sts	0x0202, r24
 194:	08 95       	ret

00000196 <right_front_left_back>:
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	8f eb       	ldi	r24, 0xBF	; 191
 19a:	9f e0       	ldi	r25, 0x0F	; 15
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <right_front_left_back+0x6>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <right_front_left_back+0x10>
 1a6:	00 00       	nop
}

void right_front_left_back()
{
    _delay_ms(350);
    PORTA &= ~(1<<1);
 1a8:	11 98       	cbi	0x02, 1	; 2
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	93 e2       	ldi	r25, 0x23	; 35
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <right_front_left_back+0x1a>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <right_front_left_back+0x24>
 1ba:	00 00       	nop
    _delay_ms(800);
//    val_sens = sensor_read();
//    while(val_sens & 0x01);
    PORTB &= ~(1<<1);
 1bc:	29 98       	cbi	0x05, 1	; 5
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	8f eb       	ldi	r24, 0xBF	; 191
 1c2:	9f e0       	ldi	r25, 0x0F	; 15
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <right_front_left_back+0x2e>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <right_front_left_back+0x38>
 1ce:	00 00       	nop
    _delay_ms(350);
    PORTB |= (1<<1);
 1d0:	29 9a       	sbi	0x05, 1	; 5
    PORTA &= ~(1<<0);
 1d2:	10 98       	cbi	0x02, 0	; 2
    left_front_right_back();
 1d4:	0c 94 a8 00 	jmp	0x150	; 0x150 <left_front_right_back>

000001d8 <standing>:
}

void standing()
{
    PORTA |= (1<<0)&(1<<1);
 1d8:	82 b1       	in	r24, 0x02	; 2
 1da:	82 b9       	out	0x02, r24	; 2
    PORTB |= (1<<0)|(1<<1);
 1dc:	85 b1       	in	r24, 0x05	; 5
 1de:	83 60       	ori	r24, 0x03	; 3
 1e0:	85 b9       	out	0x05, r24	; 5
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	90 ee       	ldi	r25, 0xE0	; 224
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <standing+0x10>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <standing+0x1a>
 1f2:	00 00       	nop
 1f4:	08 95       	ret

000001f6 <walking>:
    _delay_ms(5000);
}

void walking()
{
    if(next_pair == 1)
 1f6:	80 91 02 02 	lds	r24, 0x0202
 1fa:	88 23       	and	r24, r24
 1fc:	21 f0       	breq	.+8      	; 0x206 <walking+0x10>
    {
        next_pair = 0;
 1fe:	10 92 02 02 	sts	0x0202, r1
        right_front_left_back();
 202:	0c 94 cb 00 	jmp	0x196	; 0x196 <right_front_left_back>
 206:	08 95       	ret

00000208 <usart_init>:
    }
}

void usart_init(void)
{
    UBRR3H=BAUDRATE>>8;
 208:	10 92 35 01 	sts	0x0135, r1
    UBRR3L=BAUDRATE;
 20c:	8f e5       	ldi	r24, 0x5F	; 95
 20e:	80 93 34 01 	sts	0x0134, r24
    UCSR3B=0b10011000;//enable RXEN TXEN
 212:	88 e9       	ldi	r24, 0x98	; 152
 214:	80 93 31 01 	sts	0x0131, r24
    UCSR3C=0b00000110;// UCSZ1 UCSZ0
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	80 93 32 01 	sts	0x0132, r24
 21e:	08 95       	ret

00000220 <map_value>:
}

long map_value(long in_value, long in_min, long in_max, long out_min, long out_max)
{
 220:	4f 92       	push	r4
 222:	5f 92       	push	r5
 224:	6f 92       	push	r6
 226:	7f 92       	push	r7
 228:	af 92       	push	r10
 22a:	bf 92       	push	r11
 22c:	cf 92       	push	r12
 22e:	df 92       	push	r13
 230:	ef 92       	push	r14
 232:	ff 92       	push	r15
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
 240:	29 01       	movw	r4, r18
 242:	3a 01       	movw	r6, r20
    return (in_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 244:	62 1b       	sub	r22, r18
 246:	73 0b       	sbc	r23, r19
 248:	84 0b       	sbc	r24, r20
 24a:	95 0b       	sbc	r25, r21
 24c:	2a 89       	ldd	r18, Y+18	; 0x12
 24e:	3b 89       	ldd	r19, Y+19	; 0x13
 250:	4c 89       	ldd	r20, Y+20	; 0x14
 252:	5d 89       	ldd	r21, Y+21	; 0x15
 254:	2a 19       	sub	r18, r10
 256:	3b 09       	sbc	r19, r11
 258:	4c 09       	sbc	r20, r12
 25a:	5d 09       	sbc	r21, r13
 25c:	2a 8b       	std	Y+18, r18	; 0x12
 25e:	3b 8b       	std	Y+19, r19	; 0x13
 260:	4c 8b       	std	Y+20, r20	; 0x14
 262:	5d 8b       	std	Y+21, r21	; 0x15
 264:	9b 01       	movw	r18, r22
 266:	ac 01       	movw	r20, r24
 268:	6a 89       	ldd	r22, Y+18	; 0x12
 26a:	7b 89       	ldd	r23, Y+19	; 0x13
 26c:	8c 89       	ldd	r24, Y+20	; 0x14
 26e:	9d 89       	ldd	r25, Y+21	; 0x15
 270:	0e 94 9e 01 	call	0x33c	; 0x33c <__mulsi3>
 274:	e4 18       	sub	r14, r4
 276:	f5 08       	sbc	r15, r5
 278:	06 09       	sbc	r16, r6
 27a:	17 09       	sbc	r17, r7
 27c:	a8 01       	movw	r20, r16
 27e:	97 01       	movw	r18, r14
 280:	0e 94 ae 01 	call	0x35c	; 0x35c <__divmodsi4>
 284:	2a 0d       	add	r18, r10
 286:	3b 1d       	adc	r19, r11
 288:	4c 1d       	adc	r20, r12
 28a:	5d 1d       	adc	r21, r13
}
 28c:	ca 01       	movw	r24, r20
 28e:	b9 01       	movw	r22, r18
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	df 90       	pop	r13
 29e:	cf 90       	pop	r12
 2a0:	bf 90       	pop	r11
 2a2:	af 90       	pop	r10
 2a4:	7f 90       	pop	r7
 2a6:	6f 90       	pop	r6
 2a8:	5f 90       	pop	r5
 2aa:	4f 90       	pop	r4
 2ac:	08 95       	ret

000002ae <ps2_values>:

void ps2_values(void)
{
    if (butt[10]==1)//up
 2ae:	90 91 1d 02 	lds	r25, 0x021D
 2b2:	91 30       	cpi	r25, 0x01	; 1
 2b4:	39 f4       	brne	.+14     	; 0x2c4 <ps2_values+0x16>
    {
        up ^=1;
 2b6:	80 91 12 02 	lds	r24, 0x0212
 2ba:	89 27       	eor	r24, r25
 2bc:	80 93 12 02 	sts	0x0212, r24
        butt[10] = 0;
 2c0:	10 92 1d 02 	sts	0x021D, r1
    }
    if (butt[11]==1)//left
 2c4:	90 91 1e 02 	lds	r25, 0x021E
 2c8:	91 30       	cpi	r25, 0x01	; 1
 2ca:	39 f4       	brne	.+14     	; 0x2da <ps2_values+0x2c>
    {
        left ^= 1;
 2cc:	80 91 28 02 	lds	r24, 0x0228
 2d0:	89 27       	eor	r24, r25
 2d2:	80 93 28 02 	sts	0x0228, r24
        butt[11] = 0;
 2d6:	10 92 1e 02 	sts	0x021E, r1
    }
    if (butt[12]==1)//down
 2da:	90 91 1f 02 	lds	r25, 0x021F
 2de:	91 30       	cpi	r25, 0x01	; 1
 2e0:	39 f4       	brne	.+14     	; 0x2f0 <ps2_values+0x42>
    {
        down ^= 1;
 2e2:	80 91 29 02 	lds	r24, 0x0229
 2e6:	89 27       	eor	r24, r25
 2e8:	80 93 29 02 	sts	0x0229, r24
        butt[12] = 0;
 2ec:	10 92 1f 02 	sts	0x021F, r1
    }
    if (butt[13]==1)//right
 2f0:	90 91 20 02 	lds	r25, 0x0220
 2f4:	91 30       	cpi	r25, 0x01	; 1
 2f6:	39 f4       	brne	.+14     	; 0x306 <ps2_values+0x58>
    {
        right ^= 1;
 2f8:	80 91 23 02 	lds	r24, 0x0223
 2fc:	89 27       	eor	r24, r25
 2fe:	80 93 23 02 	sts	0x0223, r24
        butt[13] = 0;
 302:	10 92 20 02 	sts	0x0220, r1
    }
    if (butt[14]==1)//start
 306:	90 91 21 02 	lds	r25, 0x0221
 30a:	91 30       	cpi	r25, 0x01	; 1
 30c:	39 f4       	brne	.+14     	; 0x31c <ps2_values+0x6e>
    {
        start ^= 1;
 30e:	80 91 2a 02 	lds	r24, 0x022A
 312:	89 27       	eor	r24, r25
 314:	80 93 2a 02 	sts	0x022A, r24
        butt[14] = 0;
 318:	10 92 21 02 	sts	0x0221, r1
 31c:	08 95       	ret

0000031e <main>:
    }
}

int main()
{
    pneumatic_init();
 31e:	0e 94 95 00 	call	0x12a	; 0x12a <pneumatic_init>
    bluetooth_init();
 322:	0e 94 9a 00 	call	0x134	; 0x134 <bluetooth_init>
    usart_init();
 326:	0e 94 04 01 	call	0x208	; 0x208 <usart_init>
    standing();
 32a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <standing>
    while(1)
    {
        if(start == 1)
 32e:	80 91 2a 02 	lds	r24, 0x022A
 332:	88 23       	and	r24, r24
 334:	d1 f3       	breq	.-12     	; 0x32a <main+0xc>
        {
            walking();
 336:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <walking>
 33a:	f9 cf       	rjmp	.-14     	; 0x32e <main+0x10>

0000033c <__mulsi3>:
 33c:	db 01       	movw	r26, r22
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	0e 94 cd 01 	call	0x39a	; 0x39a <__muluhisi3>
 346:	bf 91       	pop	r27
 348:	af 91       	pop	r26
 34a:	a2 9f       	mul	r26, r18
 34c:	80 0d       	add	r24, r0
 34e:	91 1d       	adc	r25, r1
 350:	a3 9f       	mul	r26, r19
 352:	90 0d       	add	r25, r0
 354:	b2 9f       	mul	r27, r18
 356:	90 0d       	add	r25, r0
 358:	11 24       	eor	r1, r1
 35a:	08 95       	ret

0000035c <__divmodsi4>:
 35c:	05 2e       	mov	r0, r21
 35e:	97 fb       	bst	r25, 7
 360:	1e f4       	brtc	.+6      	; 0x368 <__divmodsi4+0xc>
 362:	00 94       	com	r0
 364:	0e 94 c5 01 	call	0x38a	; 0x38a <__negsi2>
 368:	57 fd       	sbrc	r21, 7
 36a:	07 d0       	rcall	.+14     	; 0x37a <__divmodsi4_neg2>
 36c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__udivmodsi4>
 370:	07 fc       	sbrc	r0, 7
 372:	03 d0       	rcall	.+6      	; 0x37a <__divmodsi4_neg2>
 374:	4e f4       	brtc	.+18     	; 0x388 <__divmodsi4_exit>
 376:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__negsi2>

0000037a <__divmodsi4_neg2>:
 37a:	50 95       	com	r21
 37c:	40 95       	com	r20
 37e:	30 95       	com	r19
 380:	21 95       	neg	r18
 382:	3f 4f       	sbci	r19, 0xFF	; 255
 384:	4f 4f       	sbci	r20, 0xFF	; 255
 386:	5f 4f       	sbci	r21, 0xFF	; 255

00000388 <__divmodsi4_exit>:
 388:	08 95       	ret

0000038a <__negsi2>:
 38a:	90 95       	com	r25
 38c:	80 95       	com	r24
 38e:	70 95       	com	r23
 390:	61 95       	neg	r22
 392:	7f 4f       	sbci	r23, 0xFF	; 255
 394:	8f 4f       	sbci	r24, 0xFF	; 255
 396:	9f 4f       	sbci	r25, 0xFF	; 255
 398:	08 95       	ret

0000039a <__muluhisi3>:
 39a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__umulhisi3>
 39e:	a5 9f       	mul	r26, r21
 3a0:	90 0d       	add	r25, r0
 3a2:	b4 9f       	mul	r27, r20
 3a4:	90 0d       	add	r25, r0
 3a6:	a4 9f       	mul	r26, r20
 3a8:	80 0d       	add	r24, r0
 3aa:	91 1d       	adc	r25, r1
 3ac:	11 24       	eor	r1, r1
 3ae:	08 95       	ret

000003b0 <__udivmodsi4>:
 3b0:	a1 e2       	ldi	r26, 0x21	; 33
 3b2:	1a 2e       	mov	r1, r26
 3b4:	aa 1b       	sub	r26, r26
 3b6:	bb 1b       	sub	r27, r27
 3b8:	fd 01       	movw	r30, r26
 3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <__udivmodsi4_ep>

000003bc <__udivmodsi4_loop>:
 3bc:	aa 1f       	adc	r26, r26
 3be:	bb 1f       	adc	r27, r27
 3c0:	ee 1f       	adc	r30, r30
 3c2:	ff 1f       	adc	r31, r31
 3c4:	a2 17       	cp	r26, r18
 3c6:	b3 07       	cpc	r27, r19
 3c8:	e4 07       	cpc	r30, r20
 3ca:	f5 07       	cpc	r31, r21
 3cc:	20 f0       	brcs	.+8      	; 0x3d6 <__udivmodsi4_ep>
 3ce:	a2 1b       	sub	r26, r18
 3d0:	b3 0b       	sbc	r27, r19
 3d2:	e4 0b       	sbc	r30, r20
 3d4:	f5 0b       	sbc	r31, r21

000003d6 <__udivmodsi4_ep>:
 3d6:	66 1f       	adc	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	1a 94       	dec	r1
 3e0:	69 f7       	brne	.-38     	; 0x3bc <__udivmodsi4_loop>
 3e2:	60 95       	com	r22
 3e4:	70 95       	com	r23
 3e6:	80 95       	com	r24
 3e8:	90 95       	com	r25
 3ea:	9b 01       	movw	r18, r22
 3ec:	ac 01       	movw	r20, r24
 3ee:	bd 01       	movw	r22, r26
 3f0:	cf 01       	movw	r24, r30
 3f2:	08 95       	ret

000003f4 <__umulhisi3>:
 3f4:	a2 9f       	mul	r26, r18
 3f6:	b0 01       	movw	r22, r0
 3f8:	b3 9f       	mul	r27, r19
 3fa:	c0 01       	movw	r24, r0
 3fc:	a3 9f       	mul	r26, r19
 3fe:	70 0d       	add	r23, r0
 400:	81 1d       	adc	r24, r1
 402:	11 24       	eor	r1, r1
 404:	91 1d       	adc	r25, r1
 406:	b2 9f       	mul	r27, r18
 408:	70 0d       	add	r23, r0
 40a:	81 1d       	adc	r24, r1
 40c:	11 24       	eor	r1, r1
 40e:	91 1d       	adc	r25, r1
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
